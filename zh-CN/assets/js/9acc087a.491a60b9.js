"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[85678],{3905:function(t,e,n){n.d(e,{Zo:function(){return m},kt:function(){return k}});var a=n(67294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var p=a.createContext({}),s=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},m=function(t){var e=s(t.components);return a.createElement(p.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,i=t.originalType,p=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),u=s(n),k=l,c=u["".concat(p,".").concat(k)]||u[k]||d[k]||i;return n?a.createElement(c,r(r({ref:e},m),{},{components:n})):a.createElement(c,r({ref:e},m))}));function k(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var i=n.length,r=new Array(i);r[0]=u;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:l,r[1]=o;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},93321:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},assets:function(){return m},toc:function(){return d},default:function(){return k}});var a=n(87462),l=n(63366),i=(n(67294),n(3905)),r=["components"],o={},p="OssFile",s={unversionedId:"connector-v2/sink/OssFile",id:"connector-v2/sink/OssFile",title:"OssFile",description:"Oss file sink connector",source:"@site/docs/connector-v2/sink/OssFile.md",sourceDirName:"connector-v2/sink",slug:"/connector-v2/sink/OssFile",permalink:"/zh-CN/docs/connector-v2/sink/OssFile",editUrl:"https://github.com/apache/incubator-seatunnel-website/edit/main/docs/connector-v2/sink/OssFile.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Oracle",permalink:"/zh-CN/docs/connector-v2/sink/Oracle"},next:{title:"OssJindoFile",permalink:"/zh-CN/docs/connector-v2/sink/OssJindoFile"}},m={},d=[{value:"Support Those Engines",id:"support-those-engines",level:2},{value:"Usage Dependency",id:"usage-dependency",level:2},{value:"For Spark/Flink Engine",id:"for-sparkflink-engine",level:3},{value:"For SeaTunnel Zeta Engine",id:"for-seatunnel-zeta-engine",level:3},{value:"Key features",id:"key-features",level:2},{value:"Data Type Mapping",id:"data-type-mapping",level:2},{value:"Orc File Type",id:"orc-file-type",level:3},{value:"Parquet File Type",id:"parquet-file-type",level:3},{value:"Options",id:"options",level:2},{value:"path string",id:"path-string",level:3},{value:"bucket string",id:"bucket-string",level:3},{value:"access_key string",id:"access_key-string",level:3},{value:"access_secret string",id:"access_secret-string",level:3},{value:"endpoint string",id:"endpoint-string",level:3},{value:"custom_filename boolean",id:"custom_filename-boolean",level:3},{value:"file_name_expression string",id:"file_name_expression-string",level:3},{value:"filename_time_format String",id:"filename_time_format-string",level:3},{value:"file_format_type string",id:"file_format_type-string",level:3},{value:"field_delimiter string",id:"field_delimiter-string",level:3},{value:"row_delimiter string",id:"row_delimiter-string",level:3},{value:"have_partition boolean",id:"have_partition-boolean",level:3},{value:"partition_by array",id:"partition_by-array",level:3},{value:"partition_dir_expression string",id:"partition_dir_expression-string",level:3},{value:"is_partition_field_write_in_file boolean",id:"is_partition_field_write_in_file-boolean",level:3},{value:"sink_columns array",id:"sink_columns-array",level:3},{value:"is_enable_transaction boolean",id:"is_enable_transaction-boolean",level:3},{value:"batch_size int",id:"batch_size-int",level:3},{value:"compress_codec string",id:"compress_codec-string",level:3},{value:"common options",id:"common-options",level:3},{value:"max_rows_in_memory int",id:"max_rows_in_memory-int",level:3},{value:"sheet_name string",id:"sheet_name-string",level:3},{value:"xml_root_tag string",id:"xml_root_tag-string",level:3},{value:"xml_row_tag string",id:"xml_row_tag-string",level:3},{value:"xml_use_attr_format boolean",id:"xml_use_attr_format-boolean",level:3},{value:"parquet_avro_write_timestamp_as_int96 boolean",id:"parquet_avro_write_timestamp_as_int96-boolean",level:3},{value:"parquet_avro_write_fixed_as_int96 array",id:"parquet_avro_write_fixed_as_int96-array",level:3},{value:"encoding string",id:"encoding-string",level:3},{value:"How to Create an Oss Data Synchronization Jobs",id:"how-to-create-an-oss-data-synchronization-jobs",level:2},{value:"Multiple Table",id:"multiple-table",level:3},{value:"Changelog",id:"changelog",level:2},{value:"2.2.0-beta 2022-09-26",id:"220-beta-2022-09-26",level:3},{value:"2.3.0-beta 2022-10-20",id:"230-beta-2022-10-20",level:3},{value:"Next version",id:"next-version",level:3},{value:"Tips",id:"tips",level:3}],u={toc:d};function k(t){var e=t.components,n=(0,l.Z)(t,r);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ossfile"},"OssFile"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Oss file sink connector")),(0,i.kt)("h2",{id:"support-those-engines"},"Support Those Engines"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Spark",(0,i.kt)("br",null),"\nFlink",(0,i.kt)("br",null),"\nSeaTunnel Zeta",(0,i.kt)("br",null))),(0,i.kt)("h2",{id:"usage-dependency"},"Usage Dependency"),(0,i.kt)("h3",{id:"for-sparkflink-engine"},"For Spark/Flink Engine"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"You must ensure your spark/flink cluster already integrated hadoop. The tested hadoop version is 2.x."),(0,i.kt)("li",{parentName:"ol"},"You must ensure ",(0,i.kt)("inlineCode",{parentName:"li"},"hadoop-aliyun-xx.jar"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"aliyun-sdk-oss-xx.jar")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"jdom-xx.jar")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"${SEATUNNEL_HOME}/plugins/")," dir and the version of ",(0,i.kt)("inlineCode",{parentName:"li"},"hadoop-aliyun")," jar need equals your hadoop version which used in spark/flink and ",(0,i.kt)("inlineCode",{parentName:"li"},"aliyun-sdk-oss-xx.jar")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"jdom-xx.jar")," version needs to be the version corresponding to the ",(0,i.kt)("inlineCode",{parentName:"li"},"hadoop-aliyun")," version. Eg: ",(0,i.kt)("inlineCode",{parentName:"li"},"hadoop-aliyun-3.1.4.jar")," dependency ",(0,i.kt)("inlineCode",{parentName:"li"},"aliyun-sdk-oss-3.4.1.jar")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"jdom-1.1.jar"),".")),(0,i.kt)("h3",{id:"for-seatunnel-zeta-engine"},"For SeaTunnel Zeta Engine"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"You must ensure ",(0,i.kt)("inlineCode",{parentName:"li"},"seatunnel-hadoop3-3.1.4-uber.jar"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"aliyun-sdk-oss-3.4.1.jar"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"hadoop-aliyun-3.1.4.jar")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"jdom-1.1.jar")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"${SEATUNNEL_HOME}/lib/")," dir.")),(0,i.kt)("h2",{id:"key-features"},"Key features"),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,i.kt)("a",{parentName:"li",href:"/zh-CN/docs/concept/connector-v2-features"},"exactly-once"))),(0,i.kt)("p",null,"By default, we use 2PC commit to ensure ",(0,i.kt)("inlineCode",{parentName:"p"},"exactly-once")),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","file format type",(0,i.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","text"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","csv"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","parquet"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","orc"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","json"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","excel"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","xml"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","binary")))),(0,i.kt)("h2",{id:"data-type-mapping"},"Data Type Mapping"),(0,i.kt)("p",null,"If write to ",(0,i.kt)("inlineCode",{parentName:"p"},"csv"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"text")," file type, All column will be string."),(0,i.kt)("h3",{id:"orc-file-type"},"Orc File Type"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"SeaTunnel Data Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Orc Data Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"STRING"),(0,i.kt)("td",{parentName:"tr",align:null},"STRING")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"BOOLEAN"),(0,i.kt)("td",{parentName:"tr",align:null},"BOOLEAN")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TINYINT"),(0,i.kt)("td",{parentName:"tr",align:null},"BYTE")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"SMALLINT"),(0,i.kt)("td",{parentName:"tr",align:null},"SHORT")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"INT"),(0,i.kt)("td",{parentName:"tr",align:null},"INT")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"BIGINT"),(0,i.kt)("td",{parentName:"tr",align:null},"LONG")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"FLOAT"),(0,i.kt)("td",{parentName:"tr",align:null},"FLOAT")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"FLOAT"),(0,i.kt)("td",{parentName:"tr",align:null},"FLOAT")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DOUBLE"),(0,i.kt)("td",{parentName:"tr",align:null},"DOUBLE")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DECIMAL"),(0,i.kt)("td",{parentName:"tr",align:null},"DECIMAL")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"BYTES"),(0,i.kt)("td",{parentName:"tr",align:null},"BINARY")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DATE"),(0,i.kt)("td",{parentName:"tr",align:null},"DATE")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TIME ",(0,i.kt)("br",null)," TIMESTAMP"),(0,i.kt)("td",{parentName:"tr",align:null},"TIMESTAMP")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ROW"),(0,i.kt)("td",{parentName:"tr",align:null},"STRUCT")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"NULL"),(0,i.kt)("td",{parentName:"tr",align:null},"UNSUPPORTED DATA TYPE")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ARRAY"),(0,i.kt)("td",{parentName:"tr",align:null},"LIST")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Map"),(0,i.kt)("td",{parentName:"tr",align:null},"Map")))),(0,i.kt)("h3",{id:"parquet-file-type"},"Parquet File Type"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"SeaTunnel Data Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Parquet Data Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"STRING"),(0,i.kt)("td",{parentName:"tr",align:null},"STRING")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"BOOLEAN"),(0,i.kt)("td",{parentName:"tr",align:null},"BOOLEAN")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TINYINT"),(0,i.kt)("td",{parentName:"tr",align:null},"INT_8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"SMALLINT"),(0,i.kt)("td",{parentName:"tr",align:null},"INT_16")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"INT"),(0,i.kt)("td",{parentName:"tr",align:null},"INT32")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"BIGINT"),(0,i.kt)("td",{parentName:"tr",align:null},"INT64")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"FLOAT"),(0,i.kt)("td",{parentName:"tr",align:null},"FLOAT")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"FLOAT"),(0,i.kt)("td",{parentName:"tr",align:null},"FLOAT")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DOUBLE"),(0,i.kt)("td",{parentName:"tr",align:null},"DOUBLE")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DECIMAL"),(0,i.kt)("td",{parentName:"tr",align:null},"DECIMAL")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"BYTES"),(0,i.kt)("td",{parentName:"tr",align:null},"BINARY")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DATE"),(0,i.kt)("td",{parentName:"tr",align:null},"DATE")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TIME ",(0,i.kt)("br",null)," TIMESTAMP"),(0,i.kt)("td",{parentName:"tr",align:null},"TIMESTAMP_MILLIS")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ROW"),(0,i.kt)("td",{parentName:"tr",align:null},"GroupType")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"NULL"),(0,i.kt)("td",{parentName:"tr",align:null},"UNSUPPORTED DATA TYPE")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ARRAY"),(0,i.kt)("td",{parentName:"tr",align:null},"LIST")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Map"),(0,i.kt)("td",{parentName:"tr",align:null},"Map")))),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"path"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"yes"),(0,i.kt)("td",{parentName:"tr",align:null},"The oss path to write file in."),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"tmp_path"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"/tmp/seatunnel"),(0,i.kt)("td",{parentName:"tr",align:null},"The result file will write to a tmp path first and then use ",(0,i.kt)("inlineCode",{parentName:"td"},"mv")," to submit tmp dir to target dir. Need a OSS dir.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"bucket"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"yes"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"access_key"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"yes"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"access_secret"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"yes"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"endpoint"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"yes"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"custom_filename"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether you need custom the filename")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"file_name_expression"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},'"${transactionId}"'),(0,i.kt)("td",{parentName:"tr",align:null},"Only used when custom_filename is true")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"filename_time_format"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},'"yyyy.MM.dd"'),(0,i.kt)("td",{parentName:"tr",align:null},"Only used when custom_filename is true")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"file_format_type"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},'"csv"'),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"field_delimiter"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"'\\001'"),(0,i.kt)("td",{parentName:"tr",align:null},"Only used when file_format_type is text")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"row_delimiter"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},'"\\n"'),(0,i.kt)("td",{parentName:"tr",align:null},"Only used when file_format_type is text")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"have_partition"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether you need processing partitions.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"partition_by"),(0,i.kt)("td",{parentName:"tr",align:null},"array"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"Only used then have_partition is true")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"partition_dir_expression"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},'"${k0}=${v0}/${k1}=${v1}/.../${kn}=${vn}/"'),(0,i.kt)("td",{parentName:"tr",align:null},"Only used then have_partition is true")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"is_partition_field_write_in_file"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"Only used then have_partition is true")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sink_columns"),(0,i.kt)("td",{parentName:"tr",align:null},"array"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"When this parameter is empty, all fields are sink columns")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"is_enable_transaction"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"true"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"batch_size"),(0,i.kt)("td",{parentName:"tr",align:null},"int"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"1000000"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"compress_codec"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"none"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"common-options"),(0,i.kt)("td",{parentName:"tr",align:null},"object"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"max_rows_in_memory"),(0,i.kt)("td",{parentName:"tr",align:null},"int"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"Only used when file_format_type is excel.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sheet_name"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"Sheet${Random number}"),(0,i.kt)("td",{parentName:"tr",align:null},"Only used when file_format_type is excel.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"xml_root_tag"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"RECORDS"),(0,i.kt)("td",{parentName:"tr",align:null},"Only used when file_format is xml.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"xml_row_tag"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"RECORD"),(0,i.kt)("td",{parentName:"tr",align:null},"Only used when file_format is xml.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"xml_use_attr_format"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"Only used when file_format is xml.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"parquet_avro_write_timestamp_as_int96"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"Only used when file_format is parquet.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"parquet_avro_write_fixed_as_int96"),(0,i.kt)("td",{parentName:"tr",align:null},"array"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"Only used when file_format is parquet.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"encoding"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},'"UTF-8"'),(0,i.kt)("td",{parentName:"tr",align:null},"Only used when file_format_type is json,text,csv,xml.")))),(0,i.kt)("h3",{id:"path-string"},"path ","[string]"),(0,i.kt)("p",null,"The target dir path is required."),(0,i.kt)("h3",{id:"bucket-string"},"bucket ","[string]"),(0,i.kt)("p",null,"The bucket address of oss file system, for example: ",(0,i.kt)("inlineCode",{parentName:"p"},"oss://tyrantlucifer-image-bed")),(0,i.kt)("h3",{id:"access_key-string"},"access_key ","[string]"),(0,i.kt)("p",null,"The access key of oss file system."),(0,i.kt)("h3",{id:"access_secret-string"},"access_secret ","[string]"),(0,i.kt)("p",null,"The access secret of oss file system."),(0,i.kt)("h3",{id:"endpoint-string"},"endpoint ","[string]"),(0,i.kt)("p",null,"The endpoint of oss file system."),(0,i.kt)("h3",{id:"custom_filename-boolean"},"custom_filename ","[boolean]"),(0,i.kt)("p",null,"Whether custom the filename"),(0,i.kt)("h3",{id:"file_name_expression-string"},"file_name_expression ","[string]"),(0,i.kt)("p",null,"Only used when ",(0,i.kt)("inlineCode",{parentName:"p"},"custom_filename")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"file_name_expression")," describes the file expression which will be created into the ",(0,i.kt)("inlineCode",{parentName:"p"},"path"),". We can add the variable ",(0,i.kt)("inlineCode",{parentName:"p"},"${now}")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"${uuid}")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"file_name_expression"),", like ",(0,i.kt)("inlineCode",{parentName:"p"},"test_${uuid}_${now}"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"${now}")," represents the current time, and its format can be defined by specifying the option ",(0,i.kt)("inlineCode",{parentName:"p"},"filename_time_format"),"."),(0,i.kt)("p",null,"Please note that, If ",(0,i.kt)("inlineCode",{parentName:"p"},"is_enable_transaction")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", we will auto add ",(0,i.kt)("inlineCode",{parentName:"p"},"${transactionId}_")," in the head of the file."),(0,i.kt)("h3",{id:"filename_time_format-string"},"filename_time_format ","[String]"),(0,i.kt)("p",null,"Only used when ",(0,i.kt)("inlineCode",{parentName:"p"},"custom_filename")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")),(0,i.kt)("p",null,"When the format in the ",(0,i.kt)("inlineCode",{parentName:"p"},"file_name_expression")," parameter is ",(0,i.kt)("inlineCode",{parentName:"p"},"xxxx-${Now}")," , ",(0,i.kt)("inlineCode",{parentName:"p"},"filename_time_format")," can specify the time format of the path, and the default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"yyyy.MM.dd")," . The commonly used time formats are listed as follows:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Symbol"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"y"),(0,i.kt)("td",{parentName:"tr",align:null},"Year")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"M"),(0,i.kt)("td",{parentName:"tr",align:null},"Month")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"d"),(0,i.kt)("td",{parentName:"tr",align:null},"Day of month")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"H"),(0,i.kt)("td",{parentName:"tr",align:null},"Hour in day (0-23)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"m"),(0,i.kt)("td",{parentName:"tr",align:null},"Minute in hour")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"s"),(0,i.kt)("td",{parentName:"tr",align:null},"Second in minute")))),(0,i.kt)("h3",{id:"file_format_type-string"},"file_format_type ","[string]"),(0,i.kt)("p",null,"We supported as the following file types:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"text")," ",(0,i.kt)("inlineCode",{parentName:"p"},"csv")," ",(0,i.kt)("inlineCode",{parentName:"p"},"parquet")," ",(0,i.kt)("inlineCode",{parentName:"p"},"orc")," ",(0,i.kt)("inlineCode",{parentName:"p"},"json")," ",(0,i.kt)("inlineCode",{parentName:"p"},"excel")," ",(0,i.kt)("inlineCode",{parentName:"p"},"xml")," ",(0,i.kt)("inlineCode",{parentName:"p"},"binary")),(0,i.kt)("p",null,"Please note that, The final file name will end with the file_format_type's suffix, the suffix of the text file is ",(0,i.kt)("inlineCode",{parentName:"p"},"txt"),"."),(0,i.kt)("h3",{id:"field_delimiter-string"},"field_delimiter ","[string]"),(0,i.kt)("p",null,"The separator between columns in a row of data. Only needed by ",(0,i.kt)("inlineCode",{parentName:"p"},"text")," file format."),(0,i.kt)("h3",{id:"row_delimiter-string"},"row_delimiter ","[string]"),(0,i.kt)("p",null,"The separator between rows in a file. Only needed by ",(0,i.kt)("inlineCode",{parentName:"p"},"text")," file format."),(0,i.kt)("h3",{id:"have_partition-boolean"},"have_partition ","[boolean]"),(0,i.kt)("p",null,"Whether you need processing partitions."),(0,i.kt)("h3",{id:"partition_by-array"},"partition_by ","[array]"),(0,i.kt)("p",null,"Only used when ",(0,i.kt)("inlineCode",{parentName:"p"},"have_partition")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"Partition data based on selected fields."),(0,i.kt)("h3",{id:"partition_dir_expression-string"},"partition_dir_expression ","[string]"),(0,i.kt)("p",null,"Only used when ",(0,i.kt)("inlineCode",{parentName:"p"},"have_partition")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"partition_by")," is specified, we will generate the corresponding partition directory based on the partition information, and the final file will be placed in the partition directory."),(0,i.kt)("p",null,"Default ",(0,i.kt)("inlineCode",{parentName:"p"},"partition_dir_expression")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"${k0}=${v0}/${k1}=${v1}/.../${kn}=${vn}/"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"k0")," is the first partition field and ",(0,i.kt)("inlineCode",{parentName:"p"},"v0")," is the value of the first partition field."),(0,i.kt)("h3",{id:"is_partition_field_write_in_file-boolean"},"is_partition_field_write_in_file ","[boolean]"),(0,i.kt)("p",null,"Only used when ",(0,i.kt)("inlineCode",{parentName:"p"},"have_partition")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"is_partition_field_write_in_file")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the partition field and the value of it will be write into data file."),(0,i.kt)("p",null,"For example, if you want to write a Hive Data File, Its value should be ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("h3",{id:"sink_columns-array"},"sink_columns ","[array]"),(0,i.kt)("p",null,"Which columns need be written to file, default value is all the columns get from ",(0,i.kt)("inlineCode",{parentName:"p"},"Transform")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Source"),".\nThe order of the fields determines the order in which the file is actually written."),(0,i.kt)("h3",{id:"is_enable_transaction-boolean"},"is_enable_transaction ","[boolean]"),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"is_enable_transaction")," is true, we will ensure that data will not be lost or duplicated when it is written to the target directory."),(0,i.kt)("p",null,"Please note that, If ",(0,i.kt)("inlineCode",{parentName:"p"},"is_enable_transaction")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", we will auto add ",(0,i.kt)("inlineCode",{parentName:"p"},"${transactionId}_")," in the head of the file."),(0,i.kt)("p",null,"Only support ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," now."),(0,i.kt)("h3",{id:"batch_size-int"},"batch_size ","[int]"),(0,i.kt)("p",null,"The maximum number of rows in a file. For SeaTunnel Engine, the number of lines in the file is determined by ",(0,i.kt)("inlineCode",{parentName:"p"},"batch_size")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"checkpoint.interval")," jointly decide. If the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"checkpoint.interval")," is large enough, sink writer will write rows in a file until the rows in the file larger than ",(0,i.kt)("inlineCode",{parentName:"p"},"batch_size"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"checkpoint.interval")," is small, the sink writer will create a new file when a new checkpoint trigger."),(0,i.kt)("h3",{id:"compress_codec-string"},"compress_codec ","[string]"),(0,i.kt)("p",null,"The compress codec of files and the details that supported as the following shown:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"txt: ",(0,i.kt)("inlineCode",{parentName:"li"},"lzo")," ",(0,i.kt)("inlineCode",{parentName:"li"},"none")),(0,i.kt)("li",{parentName:"ul"},"json: ",(0,i.kt)("inlineCode",{parentName:"li"},"lzo")," ",(0,i.kt)("inlineCode",{parentName:"li"},"none")),(0,i.kt)("li",{parentName:"ul"},"csv: ",(0,i.kt)("inlineCode",{parentName:"li"},"lzo")," ",(0,i.kt)("inlineCode",{parentName:"li"},"none")),(0,i.kt)("li",{parentName:"ul"},"orc: ",(0,i.kt)("inlineCode",{parentName:"li"},"lzo")," ",(0,i.kt)("inlineCode",{parentName:"li"},"snappy")," ",(0,i.kt)("inlineCode",{parentName:"li"},"lz4")," ",(0,i.kt)("inlineCode",{parentName:"li"},"zlib")," ",(0,i.kt)("inlineCode",{parentName:"li"},"none")),(0,i.kt)("li",{parentName:"ul"},"parquet: ",(0,i.kt)("inlineCode",{parentName:"li"},"lzo")," ",(0,i.kt)("inlineCode",{parentName:"li"},"snappy")," ",(0,i.kt)("inlineCode",{parentName:"li"},"lz4")," ",(0,i.kt)("inlineCode",{parentName:"li"},"gzip")," ",(0,i.kt)("inlineCode",{parentName:"li"},"brotli")," ",(0,i.kt)("inlineCode",{parentName:"li"},"zstd")," ",(0,i.kt)("inlineCode",{parentName:"li"},"none"))),(0,i.kt)("p",null,"Tips: excel type does not support any compression format"),(0,i.kt)("h3",{id:"common-options"},"common options"),(0,i.kt)("p",null,"Sink plugin common parameters, please refer to ",(0,i.kt)("a",{parentName:"p",href:"/zh-CN/docs/connector-v2/sink/common-options"},"Sink Common Options")," for details."),(0,i.kt)("h3",{id:"max_rows_in_memory-int"},"max_rows_in_memory ","[int]"),(0,i.kt)("p",null,"When File Format is Excel,The maximum number of data items that can be cached in the memory."),(0,i.kt)("h3",{id:"sheet_name-string"},"sheet_name ","[string]"),(0,i.kt)("p",null,"Writer the sheet of the workbook"),(0,i.kt)("h3",{id:"xml_root_tag-string"},"xml_root_tag ","[string]"),(0,i.kt)("p",null,"Specifies the tag name of the root element within the XML file."),(0,i.kt)("h3",{id:"xml_row_tag-string"},"xml_row_tag ","[string]"),(0,i.kt)("p",null,"Specifies the tag name of the data rows within the XML file."),(0,i.kt)("h3",{id:"xml_use_attr_format-boolean"},"xml_use_attr_format ","[boolean]"),(0,i.kt)("p",null,"Specifies Whether to process data using the tag attribute format."),(0,i.kt)("h3",{id:"parquet_avro_write_timestamp_as_int96-boolean"},"parquet_avro_write_timestamp_as_int96 ","[boolean]"),(0,i.kt)("p",null,"Support writing Parquet INT96 from a timestamp, only valid for parquet files."),(0,i.kt)("h3",{id:"parquet_avro_write_fixed_as_int96-array"},"parquet_avro_write_fixed_as_int96 ","[array]"),(0,i.kt)("p",null,"Support writing Parquet INT96 from a 12-byte field, only valid for parquet files."),(0,i.kt)("h3",{id:"encoding-string"},"encoding ","[string]"),(0,i.kt)("p",null,"Only used when file_format_type is json,text,csv,xml.\nThe encoding of the file to write. This param will be parsed by ",(0,i.kt)("inlineCode",{parentName:"p"},"Charset.forName(encoding)"),"."),(0,i.kt)("h2",{id:"how-to-create-an-oss-data-synchronization-jobs"},"How to Create an Oss Data Synchronization Jobs"),(0,i.kt)("p",null,"The following example demonstrates how to create a data synchronization job that reads data from Fake Source and writes it to the Oss:"),(0,i.kt)("p",null,"For text file format with ",(0,i.kt)("inlineCode",{parentName:"p"},"have_partition")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"custom_filename")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"sink_columns")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Set the basic configuration of the task to be performed\nenv {\n  parallelism = 1\n  job.mode = "BATCH"\n}\n\n# Create a source to product data\nsource {\n  FakeSource {\n    schema = {\n      fields {\n        name = string\n        age = int\n      }\n    }\n  }\n}\n\n# write data to Oss\nsink {\n  OssFile {\n    path="/seatunnel/sink"\n    bucket = "oss://tyrantlucifer-image-bed"\n    access_key = "xxxxxxxxxxx"\n    access_secret = "xxxxxxxxxxx"\n    endpoint = "oss-cn-beijing.aliyuncs.com"\n    file_format_type = "text"\n    field_delimiter = "\\t"\n    row_delimiter = "\\n"\n    have_partition = true\n    partition_by = ["age"]\n    partition_dir_expression = "${k0}=${v0}"\n    is_partition_field_write_in_file = true\n    custom_filename = true\n    file_name_expression = "${transactionId}_${now}"\n    filename_time_format = "yyyy.MM.dd"\n    sink_columns = ["name","age"]\n    is_enable_transaction = true\n  }\n}\n')),(0,i.kt)("p",null,"For parquet file format with ",(0,i.kt)("inlineCode",{parentName:"p"},"have_partition")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"sink_columns")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Set the basic configuration of the task to be performed\nenv {\n  parallelism = 1\n  job.mode = "BATCH"\n}\n\n# Create a source to product data\nsource {\n  FakeSource {\n    schema = {\n      fields {\n        name = string\n        age = int\n      }\n    }\n  }\n}\n\n# Write data to Oss\nsink {\n  OssFile {\n    path = "/seatunnel/sink"\n    bucket = "oss://tyrantlucifer-image-bed"\n    access_key = "xxxxxxxxxxx"\n    access_secret = "xxxxxxxxxxxxxxxxx"\n    endpoint = "oss-cn-beijing.aliyuncs.com"\n    have_partition = true\n    partition_by = ["age"]\n    partition_dir_expression = "${k0}=${v0}"\n    is_partition_field_write_in_file = true\n    file_format_type = "parquet"\n    sink_columns = ["name","age"]\n  }\n}\n')),(0,i.kt)("p",null,"For orc file format simple config"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Set the basic configuration of the task to be performed\nenv {\n  parallelism = 1\n  job.mode = "BATCH"\n}\n\n# Create a source to product data\nsource {\n  FakeSource {\n    schema = {\n      fields {\n        name = string\n        age = int\n      }\n    }\n  }\n}\n\n# Write data to Oss\nsink {\n  OssFile {\n    path="/seatunnel/sink"\n    bucket = "oss://tyrantlucifer-image-bed"\n    access_key = "xxxxxxxxxxx"\n    access_secret = "xxxxxxxxxxx"\n    endpoint = "oss-cn-beijing.aliyuncs.com"\n    file_format_type = "orc"\n  }\n}\n')),(0,i.kt)("h3",{id:"multiple-table"},"Multiple Table"),(0,i.kt)("p",null,"For extract source metadata from upstream, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"${database_name}"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"${table_name}")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"${schema_name}")," in the path."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'\nenv {\n  parallelism = 1\n  spark.app.name = "SeaTunnel"\n  spark.executor.instances = 2\n  spark.executor.cores = 1\n  spark.executor.memory = "1g"\n  spark.master = local\n  job.mode = "BATCH"\n}\n\nsource {\n  FakeSource {\n    tables_configs = [\n       {\n        schema = {\n          table = "fake1"\n          fields {\n            c_map = "map<string, string>"\n            c_array = "array<int>"\n            c_string = string\n            c_boolean = boolean\n            c_tinyint = tinyint\n            c_smallint = smallint\n            c_int = int\n            c_bigint = bigint\n            c_float = float\n            c_double = double\n            c_bytes = bytes\n            c_date = date\n            c_decimal = "decimal(38, 18)"\n            c_timestamp = timestamp\n            c_row = {\n              c_map = "map<string, string>"\n              c_array = "array<int>"\n              c_string = string\n              c_boolean = boolean\n              c_tinyint = tinyint\n              c_smallint = smallint\n              c_int = int\n              c_bigint = bigint\n              c_float = float\n              c_double = double\n              c_bytes = bytes\n              c_date = date\n              c_decimal = "decimal(38, 18)"\n              c_timestamp = timestamp\n            }\n          }\n        }\n       },\n       {\n       schema = {\n         table = "fake2"\n         fields {\n           c_map = "map<string, string>"\n           c_array = "array<int>"\n           c_string = string\n           c_boolean = boolean\n           c_tinyint = tinyint\n           c_smallint = smallint\n           c_int = int\n           c_bigint = bigint\n           c_float = float\n           c_double = double\n           c_bytes = bytes\n           c_date = date\n           c_decimal = "decimal(38, 18)"\n           c_timestamp = timestamp\n           c_row = {\n             c_map = "map<string, string>"\n             c_array = "array<int>"\n             c_string = string\n             c_boolean = boolean\n             c_tinyint = tinyint\n             c_smallint = smallint\n             c_int = int\n             c_bigint = bigint\n             c_float = float\n             c_double = double\n             c_bytes = bytes\n             c_date = date\n             c_decimal = "decimal(38, 18)"\n             c_timestamp = timestamp\n           }\n         }\n       }\n      }\n    ]\n  }\n}\n\nsink {\n  OssFile {\n    bucket = "oss://whale-ops"\n    access_key = "xxxxxxxxxxxxxxxxxxx"\n    access_secret = "xxxxxxxxxxxxxxxxxxx"\n    endpoint = "https://oss-accelerate.aliyuncs.com"\n    path = "/tmp/fake_empty/text/${table_name}"\n    row_delimiter = "\\n"\n    partition_dir_expression = "${k0}=${v0}"\n    is_partition_field_write_in_file = true\n    file_name_expression = "${transactionId}_${now}"\n    file_format_type = "text"\n    filename_time_format = "yyyy.MM.dd"\n    is_enable_transaction = true\n    compress_codec = "lzo"\n  }\n}\n\n')),(0,i.kt)("h2",{id:"changelog"},"Changelog"),(0,i.kt)("h3",{id:"220-beta-2022-09-26"},"2.2.0-beta 2022-09-26"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add OSS Sink Connector")),(0,i.kt)("h3",{id:"230-beta-2022-10-20"},"2.3.0-beta 2022-10-20"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"[BugFix]"," Fix the bug of incorrect path in windows environment (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/apache/seatunnel/pull/2980"},"2980"),")"),(0,i.kt)("li",{parentName:"ul"},"[BugFix]"," Fix filesystem get error (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/apache/seatunnel/pull/3117"},"3117"),")"),(0,i.kt)("li",{parentName:"ul"},"[BugFix]"," Solved the bug of can not parse '\\t' as delimiter from config file (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/apache/seatunnel/pull/3083"},"3083"),")")),(0,i.kt)("h3",{id:"next-version"},"Next version"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"[BugFix]"," Fixed the following bugs that failed to write data to files (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/apache/seatunnel/pull/3258"},"3258"),")",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"When field from upstream is null it will throw NullPointerException"),(0,i.kt)("li",{parentName:"ul"},"Sink columns mapping failed"),(0,i.kt)("li",{parentName:"ul"},"When restore writer from states getting transaction directly failed"))),(0,i.kt)("li",{parentName:"ul"},"[Improve]"," Support setting batch size for every file (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/apache/seatunnel/pull/3625"},"3625"),")"),(0,i.kt)("li",{parentName:"ul"},"[Improve]"," Support file compress (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/apache/seatunnel/pull/3899"},"3899"),")")),(0,i.kt)("h3",{id:"tips"},"Tips"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"1.",(0,i.kt)("a",{parentName:"p",href:"/zh-CN/docs/start-v2/locally/deployment"},"SeaTunnel Deployment Document"),".")))}k.isMDXComponent=!0}}]);