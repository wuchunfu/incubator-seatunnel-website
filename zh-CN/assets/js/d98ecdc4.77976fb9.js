"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[22815],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>m});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(t),g=a,m=p["".concat(c,".").concat(g)]||p[g]||d[g]||o;return t?r.createElement(m,l(l({ref:n},u),{},{components:t})):r.createElement(m,l({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=g;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},30505:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=t(58168),a=(t(96540),t(15680));const o={sidebar_position:3},l="Set Up with Docker in local mode",i={unversionedId:"start-v2/docker/docker",id:"start-v2/docker/docker",title:"Set Up with Docker in local mode",description:"Zeta Engine",source:"@site/docs/start-v2/docker/docker.md",sourceDirName:"start-v2/docker",slug:"/start-v2/docker/",permalink:"/zh-CN/docs/start-v2/docker/",draft:!1,editUrl:"https://github.com/apache/incubator-seatunnel-website/edit/main/docs/start-v2/docker/docker.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Spark\u5f15\u64ce\u5feb\u901f\u5f00\u59cb",permalink:"/zh-CN/docs/start-v2/locally/quick-start-spark"},next:{title:"Set Up with Kubernetes",permalink:"/zh-CN/docs/start-v2/kubernetes/"}},c={},s=[{value:"Zeta Engine",id:"zeta-engine",level:2},{value:"Download",id:"download",level:3},{value:"Build Image By Yourself",id:"build-image-by-yourself",level:3},{value:"Spark or Flink Engine",id:"spark-or-flink-engine",level:2},{value:"Download And Install the connectors you needed",id:"download-and-install-the-connectors-you-needed",level:3},{value:"Mount Spark/Flink library",id:"mount-sparkflink-library",level:3},{value:"Submit job",id:"submit-job",level:3}],u={toc:s},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"set-up-with-docker-in-local-mode"},"Set Up with Docker in local mode"),(0,a.yg)("h2",{id:"zeta-engine"},"Zeta Engine"),(0,a.yg)("h3",{id:"download"},"Download"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"docker pull apache/seatunnel:<version_tag>\n")),(0,a.yg)("p",null,"How to submit job in local mode"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"docker run --rm -it apache/seatunnel bash ./bin/seatunnel.sh -e local -c <CONFIG_FILE>\n\n\n# eg: a fake source to console sink\ndocker run --rm -it apache/seatunnel bash ./bin/seatunnel.sh -e local -c config/v2.batch.config.template\n\n")),(0,a.yg)("h3",{id:"build-image-by-yourself"},"Build Image By Yourself"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-Dockerfile"},"FROM openjdk:8\n\nARG VERSION\n# Build from Source Code And Copy it into image\nCOPY ./target/apache-seatunnel-${VERSION}-bin.tar.gz /opt/\n\n# Download From Internet\n# Please Note this file only include fake/console connector, You'll need to download the other connectors manually\n# wget -P /opt https://dlcdn.apache.org/seatunnel/2.3.6/apache-seatunnel-${VERSION}-bin.tar.gz\n\nRUN cd /opt && \\\n    tar -zxvf apache-seatunnel-${VERSION}-bin.tar.gz && \\\n    mv apache-seatunnel-${VERSION} seatunnel && \\\n    rm apache-seatunnel-${VERSION}-bin.tar.gz\n\nWORKDIR /opt/seatunnel\n")),(0,a.yg)("h2",{id:"spark-or-flink-engine"},"Spark or Flink Engine"),(0,a.yg)("h3",{id:"download-and-install-the-connectors-you-needed"},"Download And Install the connectors you needed"),(0,a.yg)("p",null,"refer the step as Zeta Engine"),(0,a.yg)("h3",{id:"mount-sparkflink-library"},"Mount Spark/Flink library"),(0,a.yg)("p",null,"By default, Spark home is ",(0,a.yg)("inlineCode",{parentName:"p"},"/opt/spark"),", Flink home is ",(0,a.yg)("inlineCode",{parentName:"p"},"/opt/flink"),".\nIf you need run with spark/flink, you can mount the related library to ",(0,a.yg)("inlineCode",{parentName:"p"},"/opt/spark")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"/opt/flink"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"docker run \\ \n -v <SPARK_BINARY_PATH>:/opt/spark \\\n -v <FLINK_BINARY_PATH>:/opt/flink \\\n  ...\n")),(0,a.yg)("p",null,"Or you can change the ",(0,a.yg)("inlineCode",{parentName:"p"},"SPARK_HOME"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"FLINK_HOME")," environment variable in Dockerfile and re-build your  and mount the spark/flink to related path."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-Dockerfile"},"FROM apache/seatunnel\n\nENV SPARK_HOME=<YOUR_CUSTOMIZATION_PATH>\n\n...\n\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"docker run \\ \n -v <SPARK_BINARY_PATH>:<YOUR_CUSTOMIZATION_PATH> \\\n  ...\n")),(0,a.yg)("h3",{id:"submit-job"},"Submit job"),(0,a.yg)("p",null,"The command is different for different engines and different versions of the same engine, please choose the correct command."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Spark")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"# spark2\ndocker run --rm -it apache/seatunnel bash ./bin/start-seatunnel-spark-2-connector-v2.sh -c config/v2.batch.config.template\n\n# spark3\ndocker run --rm -it apache/seatunnel bash ./bin/start-seatunnel-spark-3-connector-v2.sh -c config/v2.batch.config.template\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Flink\nbefore you submit job, you need start flink cluster first.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"# flink version between `1.12.x` and `1.14.x`\ndocker run --rm -it apache/seatunnel bash -c '<YOUR_FLINK_HOME>/bin/start-cluster.sh && ./bin/start-seatunnel-flink-13-connector-v2.sh -c config/v2.streaming.conf.template'\n# flink version between `1.15.x` and `1.16.x`\ndocker run --rm -it apache/seatunnel bash -c '<YOUR_FLINK_HOME>/bin/start-cluster.sh && ./bin/start-seatunnel-flink-15-connector-v2.sh -c config/v2.streaming.conf.template'\n")))}d.isMDXComponent=!0}}]);