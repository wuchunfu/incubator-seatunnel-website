"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[48212],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return k}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),k=a,m=p["".concat(i,".").concat(k)]||p[k]||f[k]||o;return t?r.createElement(m,c(c({ref:n},u),{},{components:t})):r.createElement(m,c({ref:n},u))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=p;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var l=2;l<o;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},67852:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return l},assets:function(){return u},toc:function(){return f},default:function(){return k}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),c=["components"],s={},i="Kafka source compatible kafka-connect-json",l={unversionedId:"connector-v2/formats/kafka-compatible-kafkaconnect-json",id:"connector-v2/formats/kafka-compatible-kafkaconnect-json",title:"Kafka source compatible kafka-connect-json",description:"Seatunnel connector kafka supports parsing data extracted through kafka connect source, especially data extracted from kafka connect jdbc and kafka connect debezium",source:"@site/docs/connector-v2/formats/kafka-compatible-kafkaconnect-json.md",sourceDirName:"connector-v2/formats",slug:"/connector-v2/formats/kafka-compatible-kafkaconnect-json",permalink:"/zh-CN/docs/connector-v2/formats/kafka-compatible-kafkaconnect-json",editUrl:"https://github.com/apache/incubator-seatunnel-website/edit/main/docs/connector-v2/formats/kafka-compatible-kafkaconnect-json.md",tags:[],version:"current",frontMatter:{}},u={},f=[{value:"Kafka Sink Mysql",id:"kafka-sink-mysql",level:2}],p={toc:f};function k(e){var n=e.components,t=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"kafka-source-compatible-kafka-connect-json"},"Kafka source compatible kafka-connect-json"),(0,o.kt)("p",null,"Seatunnel connector kafka supports parsing data extracted through kafka connect source, especially data extracted from kafka connect jdbc and kafka connect debezium"),(0,o.kt)("h1",{id:"how-to-use"},"How To Use"),(0,o.kt)("h2",{id:"kafka-sink-mysql"},"Kafka Sink Mysql"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'env {\n    parallelism = 1\n    job.mode = "BATCH"\n}\n\nsource {\n  Kafka {\n    bootstrap.servers = "localhost:9092"\n    topic = "jdbc_source_record"\n    result_table_name = "kafka_table"\n    start_mode = earliest\n    schema = {\n      fields {\n           id = "int"\n           name = "string"\n           description = "string"\n           weight = "string"\n      }\n    },\n    format = COMPATIBLE_KAFKA_CONNECT_JSON\n  }\n}\n\n\nsink {\n    Jdbc {\n        driver = com.mysql.cj.jdbc.Driver\n        url = "jdbc:mysql://localhost:3306/seatunnel"\n        user = st_user\n        password = seatunnel\n        generate_sink_sql = true\n        database = seatunnel\n        table = jdbc_sink\n        primary_keys = ["id"]\n    }\n}\n')))}k.isMDXComponent=!0}}]);