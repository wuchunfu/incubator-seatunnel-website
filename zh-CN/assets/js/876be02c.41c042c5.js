"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[99173],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),m=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=m(n),d=r,k=c["".concat(u,".").concat(d)]||c[d]||s[d]||l;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},33822:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return m},assets:function(){return p},toc:function(){return s},default:function(){return d}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),i=["components"],o={},u="SQL",m={unversionedId:"transform-v2/sql",id:"transform-v2/sql",title:"SQL",description:"SQL transform plugin",source:"@site/docs/transform-v2/sql.md",sourceDirName:"transform-v2",slug:"/transform-v2/sql",permalink:"/zh-CN/docs/transform-v2/sql",editUrl:"https://github.com/apache/incubator-seatunnel-website/edit/main/docs/transform-v2/sql.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"SQL UDF",permalink:"/zh-CN/docs/transform-v2/sql-udf"},next:{title:"Command usage",permalink:"/zh-CN/docs/command/usage"}},p={},s=[{value:"Description",id:"description",level:2},{value:"Options",id:"options",level:2},{value:"source_table_name string",id:"source_table_name-string",level:3},{value:"query string",id:"query-string",level:3},{value:"Example",id:"example",level:2},{value:"Struct query",id:"struct-query",level:3},{value:"Job Config Example",id:"job-config-example",level:2},{value:"Changelog",id:"changelog",level:2},{value:"new version",id:"new-version",level:3}],c={toc:s};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"sql"},"SQL"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"SQL transform plugin")),(0,l.kt)("h2",{id:"description"},"Description"),(0,l.kt)("p",null,"Use SQL to transform given input row."),(0,l.kt)("p",null,"SQL transform use memory SQL engine, we can via SQL functions and ability of SQL engine to implement the transform task."),(0,l.kt)("h2",{id:"options"},"Options"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"required"),(0,l.kt)("th",{parentName:"tr",align:null},"default value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"source_table_name"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"result_table_name"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes"),(0,l.kt)("td",{parentName:"tr",align:null},"-")))),(0,l.kt)("h3",{id:"source_table_name-string"},"source_table_name ","[string]"),(0,l.kt)("p",null,"The source table name, the query SQL table name must match this field."),(0,l.kt)("h3",{id:"query-string"},"query ","[string]"),(0,l.kt)("p",null,"The query SQL, it's a simple SQL supported base function and criteria filter operation. But the complex SQL unsupported yet, include: multi source table/rows JOIN and AGGREGATE operation and the like."),(0,l.kt)("p",null,"the query expression can be ",(0,l.kt)("inlineCode",{parentName:"p"},"select [table_name.]column_a")," to query the column that named ",(0,l.kt)("inlineCode",{parentName:"p"},"column_a"),". and the table name is optional.",(0,l.kt)("br",{parentName:"p"}),"\n","or ",(0,l.kt)("inlineCode",{parentName:"p"},"select c_row.c_inner_row.column_b")," to query the inline struct column that named ",(0,l.kt)("inlineCode",{parentName:"p"},"column_b")," within ",(0,l.kt)("inlineCode",{parentName:"p"},"c_row")," column and ",(0,l.kt)("inlineCode",{parentName:"p"},"c_inner_row")," column. ",(0,l.kt)("strong",{parentName:"p"},"In this query expression, can't have table name.")),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("p",null,"The data read from source is a table like this:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"age"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"Joy Ding"),(0,l.kt)("td",{parentName:"tr",align:null},"20")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"May Ding"),(0,l.kt)("td",{parentName:"tr",align:null},"21")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Kin Dom"),(0,l.kt)("td",{parentName:"tr",align:null},"24")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"Joy Dom"),(0,l.kt)("td",{parentName:"tr",align:null},"22")))),(0,l.kt)("p",null,"We use SQL query to transform the source data like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'transform {\n  Sql {\n    source_table_name = "fake"\n    result_table_name = "fake1"\n    query = "select id, concat(name, \'_\') as name, age+1 as age from fake where id>0"\n  }\n}\n')),(0,l.kt)("p",null,"Then the data in result table ",(0,l.kt)("inlineCode",{parentName:"p"},"fake1")," will update to"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"age"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"Joy Ding_"),(0,l.kt)("td",{parentName:"tr",align:null},"21")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"May Ding_"),(0,l.kt)("td",{parentName:"tr",align:null},"22")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Kin Dom_"),(0,l.kt)("td",{parentName:"tr",align:null},"25")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"Joy Dom_"),(0,l.kt)("td",{parentName:"tr",align:null},"23")))),(0,l.kt)("h3",{id:"struct-query"},"Struct query"),(0,l.kt)("p",null,"if your upstream data schema is like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-hacon"},'source {\n  FakeSource {\n    result_table_name = "fake"\n    row.num = 100\n    string.template = ["innerQuery"]\n    schema = {\n      fields {\n        name = "string"\n        c_date = "date"\n        c_row = {\n          c_inner_row = {\n            c_inner_int = "int"\n            c_inner_string = "string"\n            c_inner_timestamp = "timestamp"\n            c_map_1 = "map<string, string>"\n            c_map_2 = "map<string, map<string,string>>"\n          }\n          c_string = "string"\n        }\n      }\n    }\n  }\n}\n')),(0,l.kt)("p",null,"Those query all are valid:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select \nname,\nc_date,\nc_row,\nc_row.c_inner_row,\nc_row.c_string,\nc_row.c_inner_row.c_inner_int,\nc_row.c_inner_row.c_inner_string,\nc_row.c_inner_row.c_inner_timestamp,\nc_row.c_inner_row.c_map_1,\nc_row.c_inner_row.c_map_1.some_key\n")),(0,l.kt)("p",null,"But this query are not valid:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select \nc_row.c_inner_row.c_map_2.some_key.inner_map_key\n")),(0,l.kt)("p",null,"The map must be the latest struct, can't query the nesting map."),(0,l.kt)("h2",{id:"job-config-example"},"Job Config Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'env {\n  job.mode = "BATCH"\n}\n\nsource {\n  FakeSource {\n    result_table_name = "fake"\n    row.num = 100\n    schema = {\n      fields {\n        id = "int"\n        name = "string"\n        age = "int"\n      }\n    }\n  }\n}\n\ntransform {\n  Sql {\n    source_table_name = "fake"\n    result_table_name = "fake1"\n    query = "select id, concat(name, \'_\') as name, age+1 as age from fake where id>0"\n  }\n}\n\nsink {\n  Console {\n    source_table_name = "fake1"\n  }\n}\n')),(0,l.kt)("h2",{id:"changelog"},"Changelog"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Support struct query")),(0,l.kt)("h3",{id:"new-version"},"new version"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Add SQL Transform Connector")))}d.isMDXComponent=!0}}]);