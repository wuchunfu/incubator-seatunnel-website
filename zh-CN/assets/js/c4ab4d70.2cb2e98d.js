"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[55435],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return n?a.createElement(f,s(s({ref:t},c),{},{components:n})):a.createElement(f,s({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9354:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},assets:function(){return c},toc:function(){return m},default:function(){return d}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),s=["components"],i={},l="Debezium Format",u={unversionedId:"connector-v2/formats/debezium-json",id:"connector-v2/formats/debezium-json",title:"Debezium Format",description:"Changelog-Data-Capture Format Deserialization Schema",source:"@site/docs/connector-v2/formats/debezium-json.md",sourceDirName:"connector-v2/formats",slug:"/connector-v2/formats/debezium-json",permalink:"/zh-CN/docs/connector-v2/formats/debezium-json",editUrl:"https://github.com/apache/incubator-seatunnel-website/edit/main/docs/connector-v2/formats/debezium-json.md",tags:[],version:"current",frontMatter:{}},c={},m=[{value:"Kafka uses example",id:"kafka-uses-example",level:2}],p={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"debezium-format"},"Debezium Format"),(0,o.kt)("p",null,"Changelog-Data-Capture Format: Serialization Schema Format: Deserialization Schema"),(0,o.kt)("p",null,"Debezium is a set of distributed services to capture changes in your databases so that your applications can see those changes and respond to them. Debezium records all row-level changes within each database table in a ",(0,o.kt)("em",{parentName:"p"},"change event stream"),", and applications simply read these streams to see the change events in the same order in which they occurred."),(0,o.kt)("p",null,"Seatunnel supports to interpret Debezium JSON messages as INSERT/UPDATE/DELETE messages into seatunnel system. This is useful in many cases to leverage this feature, such as"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    synchronizing incremental data from databases to other systems\n    auditing logs\n    real-time materialized views on databases\n    temporal join changing history of a database table and so on.\n")),(0,o.kt)("p",null,"Seatunnel also supports to encode the INSERT/UPDATE/DELETE messages in Seatunnel asDebezium JSON messages, and emit to storage like Kafka."),(0,o.kt)("h1",{id:"format-options"},"Format Options"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"option"),(0,o.kt)("th",{parentName:"tr",align:null},"default"),(0,o.kt)("th",{parentName:"tr",align:null},"required"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"format"),(0,o.kt)("td",{parentName:"tr",align:null},"(none)"),(0,o.kt)("td",{parentName:"tr",align:null},"yes"),(0,o.kt)("td",{parentName:"tr",align:null},"Specify what format to use, here should be 'debezium_json'.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"debezium-json.ignore-parse-errors"),(0,o.kt)("td",{parentName:"tr",align:null},"false"),(0,o.kt)("td",{parentName:"tr",align:null},"no"),(0,o.kt)("td",{parentName:"tr",align:null},"Skip fields and rows with parse errors instead of failing. Fields are set to null in case of errors.")))),(0,o.kt)("h1",{id:"how-to-use-debezium-format"},"How to use Debezium format"),(0,o.kt)("h2",{id:"kafka-uses-example"},"Kafka uses example"),(0,o.kt)("p",null,"Debezium provides a unified format for changelog, here is a simple example for an update operation captured from a MySQL products table:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'{\n    "before": {\n        "id": 111,\n        "name": "scooter",\n        "description": "Big 2-wheel scooter ",\n        "weight": 5.18\n    },\n    "after": {\n        "id": 111,\n        "name": "scooter",\n        "description": "Big 2-wheel scooter ",\n        "weight": 5.17\n    },\n    "source": {\n        "version": "1.1.1.Final",\n        "connector": "mysql",\n        "name": "dbserver1",\n        "ts_ms": 1589362330000,\n        "snapshot": "false",\n        "db": "inventory",\n        "table": "products",\n        "server_id": 223344,\n        "gtid": null,\n        "file": "mysql-bin.000003",\n        "pos": 2090,\n        "row": 0,\n        "thread": 2,\n        "query": null\n    },\n    "op": "u",\n    "ts_ms": 1589362330904,\n    "transaction": null\n}\n')),(0,o.kt)("p",null,"Note: please refer to Debezium documentation about the meaning of each fields."),(0,o.kt)("p",null,"The MySQL products table has 4 columns (id, name, description and weight).\nThe above JSON message is an update change event on the products table where the weight value of the row with id = 111 is changed from 5.18 to 5.15.\nAssuming the messages have been synchronized to Kafka topic products_binlog, then we can use the following Seatunnel conf to consume this topic and interpret the change events by Debezium format."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'env {\n    execution.parallelism = 1\n    job.mode = "BATCH"\n}\n\nsource {\n  Kafka {\n    bootstrap.servers = "kafkaCluster:9092"\n    topic = "products_binlog"\n    result_table_name = "kafka_name"\n    start_mode = earliest\n    schema = {\n      fields {\n           id = "int"\n           name = "string"\n           description = "string"\n           weight = "string"\n      }\n    }\n    format = debezium_json\n  }\n\n}\n\ntransform {\n}\n\nsink {\n  Kafka {\n    bootstrap.servers = "kafkaCluster:9092"\n    topic = "consume-binlog"\n    format = debezium_json\n  }\n}\n')))}d.isMDXComponent=!0}}]);