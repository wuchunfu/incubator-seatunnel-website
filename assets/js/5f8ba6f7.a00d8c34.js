"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[30430],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return u}});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var m=a.createContext({}),d=function(t){var e=a.useContext(m),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=d(t.components);return a.createElement(m.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,m=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),c=d(n),u=r,k=c["".concat(m,".").concat(u)]||c[u]||s[u]||l;return n?a.createElement(k,i(i({ref:e},p),{},{components:n})):a.createElement(k,i({ref:e},p))}));function u(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var m in e)hasOwnProperty.call(e,m)&&(o[m]=e[m]);o.originalType=t,o.mdxType="string"==typeof t?t:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},13993:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return o},contentTitle:function(){return m},metadata:function(){return d},assets:function(){return p},toc:function(){return s},default:function(){return u}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),i=["components"],o={},m="Intro to schema feature",d={unversionedId:"concept/schema-feature",id:"concept/schema-feature",title:"Intro to schema feature",description:"Why we need schema",source:"@site/docs/concept/schema-feature.md",sourceDirName:"concept",slug:"/concept/schema-feature",permalink:"/docs/concept/schema-feature",editUrl:"https://github.com/apache/incubator-seatunnel-website/edit/main/docs/concept/schema-feature.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Intro To Connector V2 Features",permalink:"/docs/concept/connector-v2-features"},next:{title:"JobEnvConfig",permalink:"/docs/concept/JobEnvConfig"}},p={},s=[{value:"Why we need schema",id:"why-we-need-schema",level:2},{value:"SchemaOptions",id:"schemaoptions",level:2},{value:"Columns",id:"columns",level:3},{value:"What type supported at now",id:"what-type-supported-at-now",level:4},{value:"PrimaryKey",id:"primarykey",level:3},{value:"ConstraintKeys",id:"constraintkeys",level:3},{value:"What constraintType supported at now",id:"what-constrainttype-supported-at-now",level:4},{value:"How to use schema",id:"how-to-use-schema",level:2},{value:"Recommended",id:"recommended",level:3},{value:"Deprecated",id:"deprecated",level:3},{value:"When we should use it or not",id:"when-we-should-use-it-or-not",level:2}],c={toc:s};function u(t){var e=t.components,n=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"intro-to-schema-feature"},"Intro to schema feature"),(0,l.kt)("h2",{id:"why-we-need-schema"},"Why we need schema"),(0,l.kt)("p",null,"Some NoSQL databases or message queue are not strongly limited schema, so the schema cannot be obtained through the api.\nAt this time, a schema needs to be defined to convert to TableSchema and obtain data."),(0,l.kt)("h2",{id:"schemaoptions"},"SchemaOptions"),(0,l.kt)("p",null,"We can use SchemaOptions to define schema, the SchemaOptions contains some config to define the schema. e.g. columns, primaryKey, constraintKeys."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"schema = {\n    columns = [\n    ...\n    ]\n    primaryKey {\n    ...\n    }\n    \n    constraintKeys {\n    ...\n    }\n}\n")),(0,l.kt)("h3",{id:"columns"},"Columns"),(0,l.kt)("p",null,"Columns is a list of config used to define the column in schema, each column can contains name, type, nullable, defaultValue, comment field."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'columns = [\n       {\n          name = id\n          type = bigint\n          nullable = false\n          columnLength = 20\n          defaultValue = 0\n          comment = "primary key id"\n       }\n]\n')),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"name"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Yes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the column")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"type"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Yes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"The data type of the column")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"nullable"),(0,l.kt)("td",{parentName:"tr",align:"left"},"No"),(0,l.kt)("td",{parentName:"tr",align:"left"},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"If the column can be nullable")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"columnLength"),(0,l.kt)("td",{parentName:"tr",align:"left"},"No"),(0,l.kt)("td",{parentName:"tr",align:"left"},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"The length of the column which will be useful when you need to define the length")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"defaultValue"),(0,l.kt)("td",{parentName:"tr",align:"left"},"No"),(0,l.kt)("td",{parentName:"tr",align:"left"},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"The default value of the column")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"comment"),(0,l.kt)("td",{parentName:"tr",align:"left"},"No"),(0,l.kt)("td",{parentName:"tr",align:"left"},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"The comment of the column")))),(0,l.kt)("h4",{id:"what-type-supported-at-now"},"What type supported at now"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Data type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Value type in Java"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"java.lang.String")),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"java.lang.Boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"tinyint"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"java.lang.Byte")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-128 to 127 regular. 0 to 255 unsigned*. Specify the maximum number of digits in parentheses.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"smallint"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"java.lang.Short")),(0,l.kt)("td",{parentName:"tr",align:"left"},"-32768 to 32767 General. 0 to 65535 unsigned*. Specify the maximum number of digits in parentheses.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"int"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"java.lang.Integer")),(0,l.kt)("td",{parentName:"tr",align:"left"},"All numbers from -2,147,483,648 to 2,147,483,647 are allowed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bigint"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"java.lang.Long")),(0,l.kt)("td",{parentName:"tr",align:"left"},"All numbers between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807 are allowed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"float"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"java.lang.Float")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Float-precision numeric data from -1.79E+308 to 1.79E+308.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"double"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"java.lang.Double")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Double precision floating point. Handle most decimals.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"decimal"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"java.math.BigDecimal")),(0,l.kt)("td",{parentName:"tr",align:"left"},"DOUBLE type stored as a string, allowing a fixed decimal point.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"null"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"java.lang.Void")),(0,l.kt)("td",{parentName:"tr",align:"left"},"null")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"byte[]")),(0,l.kt)("td",{parentName:"tr",align:"left"},"bytes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"date"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"java.time.LocalDate")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Only the date is stored. From January 1, 0001 to December 31, 9999.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"time"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"java.time.LocalTime")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Only store time. Accuracy is 100 nanoseconds.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"timestamp"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"java.time.LocalDateTime")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Stores a unique number that is updated whenever a row is created or modified. timestamp is based on the internal clock and does not correspond to real time. There can only be one timestamp variable per table.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"row"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"org.apache.seatunnel.api.table.type.SeaTunnelRow")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Row type,can be nested.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"map"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"java.util.Map")),(0,l.kt)("td",{parentName:"tr",align:"left"},"A Map is an object that maps keys to values. The key type includes ",(0,l.kt)("inlineCode",{parentName:"td"},"int")," ",(0,l.kt)("inlineCode",{parentName:"td"},"string")," ",(0,l.kt)("inlineCode",{parentName:"td"},"boolean")," ",(0,l.kt)("inlineCode",{parentName:"td"},"tinyint")," ",(0,l.kt)("inlineCode",{parentName:"td"},"smallint")," ",(0,l.kt)("inlineCode",{parentName:"td"},"bigint")," ",(0,l.kt)("inlineCode",{parentName:"td"},"float")," ",(0,l.kt)("inlineCode",{parentName:"td"},"double")," ",(0,l.kt)("inlineCode",{parentName:"td"},"decimal")," ",(0,l.kt)("inlineCode",{parentName:"td"},"date")," ",(0,l.kt)("inlineCode",{parentName:"td"},"time")," ",(0,l.kt)("inlineCode",{parentName:"td"},"timestamp")," ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," , and the value type includes ",(0,l.kt)("inlineCode",{parentName:"td"},"int")," ",(0,l.kt)("inlineCode",{parentName:"td"},"string")," ",(0,l.kt)("inlineCode",{parentName:"td"},"boolean")," ",(0,l.kt)("inlineCode",{parentName:"td"},"tinyint")," ",(0,l.kt)("inlineCode",{parentName:"td"},"smallint")," ",(0,l.kt)("inlineCode",{parentName:"td"},"bigint")," ",(0,l.kt)("inlineCode",{parentName:"td"},"float")," ",(0,l.kt)("inlineCode",{parentName:"td"},"double")," ",(0,l.kt)("inlineCode",{parentName:"td"},"decimal")," ",(0,l.kt)("inlineCode",{parentName:"td"},"date")," ",(0,l.kt)("inlineCode",{parentName:"td"},"time")," ",(0,l.kt)("inlineCode",{parentName:"td"},"timestamp")," ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," ",(0,l.kt)("inlineCode",{parentName:"td"},"array")," ",(0,l.kt)("inlineCode",{parentName:"td"},"map"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"array"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"ValueType[]")),(0,l.kt)("td",{parentName:"tr",align:"left"},"A array is a data type that represents a collection of elements. The element type includes ",(0,l.kt)("inlineCode",{parentName:"td"},"int")," ",(0,l.kt)("inlineCode",{parentName:"td"},"string")," ",(0,l.kt)("inlineCode",{parentName:"td"},"boolean")," ",(0,l.kt)("inlineCode",{parentName:"td"},"tinyint")," ",(0,l.kt)("inlineCode",{parentName:"td"},"smallint")," ",(0,l.kt)("inlineCode",{parentName:"td"},"bigint")," ",(0,l.kt)("inlineCode",{parentName:"td"},"float")," ",(0,l.kt)("inlineCode",{parentName:"td"},"double")," ",(0,l.kt)("inlineCode",{parentName:"td"},"array")," ",(0,l.kt)("inlineCode",{parentName:"td"},"map"),".")))),(0,l.kt)("h3",{id:"primarykey"},"PrimaryKey"),(0,l.kt)("p",null,"Primary key is a config used to define the primary key in schema, it contains name, columns field."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"primaryKey {\n    name = id\n    columns = [id]\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"name"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Yes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the primaryKey")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"columns"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Yes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"The column list in the primaryKey")))),(0,l.kt)("h3",{id:"constraintkeys"},"ConstraintKeys"),(0,l.kt)("p",null,"Constraint keys is a list of config used to define the constraint keys in schema, it contains constraintName, constraintType, constraintColumns field."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'constraintKeys = [\n      {\n         constraintName = "id_index"\n         constraintType = KEY\n         constraintColumns = [\n            {\n                columnName = "id"\n                sortType = ASC\n            }\n         ]\n      },\n   ]\n')),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"constraintName"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Yes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the constraintKey")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"constraintType"),(0,l.kt)("td",{parentName:"tr",align:"left"},"No"),(0,l.kt)("td",{parentName:"tr",align:"left"},"KEY"),(0,l.kt)("td",{parentName:"tr",align:null},"The type of the constraintKey")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"constraintColumns"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Yes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"The column list in the primaryKey, each column should contains constraintType and sortType, sortType support ASC and DESC, default is ASC")))),(0,l.kt)("h4",{id:"what-constrainttype-supported-at-now"},"What constraintType supported at now"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"ConstraintType"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"INDEX_KEY"),(0,l.kt)("td",{parentName:"tr",align:"left"},"key")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"UNIQUE_KEY"),(0,l.kt)("td",{parentName:"tr",align:"left"},"unique key")))),(0,l.kt)("h2",{id:"how-to-use-schema"},"How to use schema"),(0,l.kt)("h3",{id:"recommended"},"Recommended"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'source {\n  FakeSource {\n    parallelism = 2\n    result_table_name = "fake"\n    row.num = 16\n    schema {\n        columns = [\n           {\n              name = id\n              type = bigint\n              nullable = false\n              defaultValue = 0\n              comment = "primary key id"\n           },\n           {\n              name = name\n              type = "string"\n              nullable = true\n              comment = "name"\n           },\n           {\n              name = age\n              type = int\n              nullable = true\n              comment = "age"\n           }\n       ]\n       primaryKey {\n          name = "id"\n          columnNames = [id]\n       }\n       constraintKeys = [\n          {\n             constraintName = "unique_name"\n             constraintType = UNIQUE_KEY\n             constraintColumns = [\n                {\n                    columnName = "name"\n                    sortType = ASC\n                }\n             ]\n          },\n       ]\n      }\n    }\n}\n')),(0,l.kt)("h3",{id:"deprecated"},"Deprecated"),(0,l.kt)("p",null,"If you only need to define the column, you can use fields to define the column, this is a simple way but will be remove in the future."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'source {\n  FakeSource {\n    parallelism = 2\n    result_table_name = "fake"\n    row.num = 16\n    schema = {\n      fields {\n        id = bigint\n        c_map = "map<string, smallint>"\n        c_array = "array<tinyint>"\n        c_string = string\n        c_boolean = boolean\n        c_tinyint = tinyint\n        c_smallint = smallint\n        c_int = int\n        c_bigint = bigint\n        c_float = float\n        c_double = double\n        c_decimal = "decimal(2, 1)"\n        c_bytes = bytes\n        c_date = date\n        c_timestamp = timestamp\n      }\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"when-we-should-use-it-or-not"},"When we should use it or not"),(0,l.kt)("p",null,"If there is a ",(0,l.kt)("inlineCode",{parentName:"p"},"schema")," configuration project in Options,the connector can then customize the schema. Like ",(0,l.kt)("inlineCode",{parentName:"p"},"Fake")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Pulsar")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Http")," source connector etc."))}u.isMDXComponent=!0}}]);