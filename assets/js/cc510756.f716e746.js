"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[1956],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),f=p(n),c=a,m=f["".concat(s,".").concat(c)]||f[c]||d[c]||i;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},30101:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},assets:function(){return u},toc:function(){return d},default:function(){return c}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),l=["components"],o={},s="Split",p={unversionedId:"spark/configuration/transform-plugins/Split",id:"version-2.1.0/spark/configuration/transform-plugins/Split",title:"Split",description:"Transform plugin : Split [Spark]",source:"@site/versioned_docs/version-2.1.0/spark/configuration/transform-plugins/Split.md",sourceDirName:"spark/configuration/transform-plugins",slug:"/spark/configuration/transform-plugins/Split",permalink:"/docs/2.1.0/spark/configuration/transform-plugins/Split",editUrl:"https://github.com/apache/incubator-seatunnel-website/edit/main/versioned_docs/version-2.1.0/spark/configuration/transform-plugins/Split.md",tags:[],version:"2.1.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Json",permalink:"/docs/2.1.0/spark/configuration/transform-plugins/Json"},next:{title:"Sql",permalink:"/docs/2.1.0/spark/configuration/transform-plugins/Sql"}},u={},d=[{value:"Description",id:"description",level:2},{value:"Options",id:"options",level:2},{value:"separator string",id:"separator-string",level:3},{value:"fields list",id:"fields-list",level:3},{value:"source_field string",id:"source_field-string",level:3},{value:"target_field string",id:"target_field-string",level:3},{value:"common options string",id:"common-options-string",level:3},{value:"Examples",id:"examples",level:2}],f={toc:d};function c(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"split"},"Split"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Transform plugin : Split ","[Spark]")),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Split string according to ",(0,i.kt)("inlineCode",{parentName:"p"},"separator")),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"name"),(0,i.kt)("th",{parentName:"tr",align:null},"type"),(0,i.kt)("th",{parentName:"tr",align:null},"required"),(0,i.kt)("th",{parentName:"tr",align:null},"default value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"separator"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},'" "')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"fields"),(0,i.kt)("td",{parentName:"tr",align:null},"array"),(0,i.kt)("td",{parentName:"tr",align:null},"yes"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"source_field"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"raw_message")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"target_field"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"root"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"common-options"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"-")))),(0,i.kt)("h3",{id:"separator-string"},"separator ","[string]"),(0,i.kt)("p",null,"Separator, the input string is separated according to the separator. The default separator is a space ",(0,i.kt)("inlineCode",{parentName:"p"},'(" ")')," ."),(0,i.kt)("h3",{id:"fields-list"},"fields ","[list]"),(0,i.kt)("p",null,"In the split field name list, specify the field names of each character string after splitting in order. If the length of the ",(0,i.kt)("inlineCode",{parentName:"p"},"fields")," is greater than the length of the separation result, the extra fields are assigned null characters."),(0,i.kt)("h3",{id:"source_field-string"},"source_field ","[string]"),(0,i.kt)("p",null,"The source field of the string before being split, if not configured, the default is ",(0,i.kt)("inlineCode",{parentName:"p"},"raw_message")),(0,i.kt)("h3",{id:"target_field-string"},"target_field ","[string]"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"target_field")," can specify the location where multiple split fields are added to the Event. If it is not configured, the default is ",(0,i.kt)("inlineCode",{parentName:"p"},"_root_")," , that is, all split fields will be added to the top level of the Event. If a specific field is specified, the divided field will be added to the next level of this field."),(0,i.kt)("h3",{id:"common-options-string"},"common options ","[string]"),(0,i.kt)("p",null,"Transform plugin common parameters, please refer to ",(0,i.kt)("a",{parentName:"p",href:"/docs/2.1.0/spark/configuration/transform-plugins/transform-plugin"},"Transform Plugin")," for details"),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Split the ",(0,i.kt)("inlineCode",{parentName:"li"},"message")," field in the source data according to ",(0,i.kt)("inlineCode",{parentName:"li"},"&"),", you can use ",(0,i.kt)("inlineCode",{parentName:"li"},"field1")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"field2")," as the key to get the corresponding value")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'split {\n    source_field = "message"\n    separator = "&"\n    fields = ["field1", "field2"]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Split the ",(0,i.kt)("inlineCode",{parentName:"li"},"message")," field in the source data according to ",(0,i.kt)("inlineCode",{parentName:"li"},",")," , the split field is ",(0,i.kt)("inlineCode",{parentName:"li"},"info")," , you can use ",(0,i.kt)("inlineCode",{parentName:"li"},"info.field1")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"info.field2")," as the key to get the corresponding value")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'split {\n    source_field = "message"\n    target_field = "info"\n    separator = ","\n    fields = ["field1", "field2"]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"Split")," as udf in sql.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'  # This just created a udf called split\n  Split{\n    separator = "#"\n    fields = ["name","age"]\n  }\n  # Use the split function (confirm that the fake table exists)\n  sql {\n    sql = "select * from (select raw_message,split(raw_message) as info_row from fake) t1"\n  }\n')))}c.isMDXComponent=!0}}]);