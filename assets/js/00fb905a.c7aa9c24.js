"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[25386],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,f=u["".concat(s,".").concat(d)]||u[d]||p[d]||o;return n?r.createElement(f,i(i({ref:t},m),{},{components:n})):r.createElement(f,i({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},35031:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},assets:function(){return m},toc:function(){return p},default:function(){return d}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={},s="Transform Common Options",c={unversionedId:"transform-v2/common-options",id:"transform-v2/common-options",title:"Transform Common Options",description:"This is a process of intermediate conversion between the source and sink terminals,You can use sql statements to smoothly complete the conversion process",source:"@site/docs/transform-v2/common-options.md",sourceDirName:"transform-v2",slug:"/transform-v2/common-options",permalink:"/docs/transform-v2/common-options",editUrl:"https://github.com/apache/incubator-seatunnel-website/edit/main/docs/transform-v2/common-options.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Transform-V2",permalink:"/docs/category/transform-v2"},next:{title:"Copy",permalink:"/docs/transform-v2/copy"}},m={},p=[{value:"Task Example",id:"task-example",level:2},{value:"Simple:",id:"simple",level:3}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"transform-common-options"},"Transform Common Options"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This is a process of intermediate conversion between the source and sink terminals,You can use sql statements to smoothly complete the conversion process")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Required"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"result_table_name"),(0,o.kt)("td",{parentName:"tr",align:null},"String"),(0,o.kt)("td",{parentName:"tr",align:null},"No"),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null},"When ",(0,o.kt)("inlineCode",{parentName:"td"},"source_table_name")," is not specified, the current plug-in processes the data set ",(0,o.kt)("inlineCode",{parentName:"td"},"(dataset)")," output by the previous plug-in in the configuration file; ",(0,o.kt)("br",null),"When ",(0,o.kt)("inlineCode",{parentName:"td"},"source_table_name")," is specified, the current plugin is processing the data set corresponding to this parameter.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"source_table_name"),(0,o.kt)("td",{parentName:"tr",align:null},"String"),(0,o.kt)("td",{parentName:"tr",align:null},"No"),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null},"When ",(0,o.kt)("inlineCode",{parentName:"td"},"result_table_name")," is not specified, the data processed by this plugin will not be registered as a data set that can be directly accessed by other plugins, or called a temporary table ",(0,o.kt)("inlineCode",{parentName:"td"},"(table)"),"; ",(0,o.kt)("br",null),"When ",(0,o.kt)("inlineCode",{parentName:"td"},"result_table_name")," is specified, the data processed by this plugin will be registered as a data set ",(0,o.kt)("inlineCode",{parentName:"td"},"(dataset)")," that can be directly accessed by other plugins, or called a temporary table ",(0,o.kt)("inlineCode",{parentName:"td"},"(table)")," . The dataset registered here can be directly accessed by other plugins by specifying ",(0,o.kt)("inlineCode",{parentName:"td"},"source_table_name")," .")))),(0,o.kt)("h2",{id:"task-example"},"Task Example"),(0,o.kt)("h3",{id:"simple"},"Simple:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This is the process of converting the data source to fake and write it to two different sinks, Detailed reference ",(0,o.kt)("inlineCode",{parentName:"p"},"transform"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'env {\n  job.mode = "BATCH"\n}\n\nsource {\n  FakeSource {\n    result_table_name = "fake"\n    row.num = 100\n    schema = {\n      fields {\n        id = "int"\n        name = "string"\n        age = "int"\n        c_timestamp = "timestamp"\n        c_date = "date"\n        c_map = "map<string, string>"\n        c_array = "array<int>"\n        c_decimal = "decimal(30, 8)"\n        c_row = {\n          c_row = {\n            c_int = int\n          }\n        }\n      }\n    }\n  }\n}\n\ntransform {\n  Sql {\n    source_table_name = "fake"\n    result_table_name = "fake1"\n    # the query table name must same as field \'source_table_name\'\n    query = "select id, regexp_replace(name, \'.+\', \'b\') as name, age+1 as age, pi() as pi, c_timestamp, c_date, c_map, c_array, c_decimal, c_row from fake"\n  }\n  # The SQL transform support base function and criteria operation\n  # But the complex SQL unsupported yet, include: multi source table/rows JOIN and AGGREGATE operation and the like\n}\n\nsink {\n  Console {\n    source_table_name = "fake1"\n  }\n   Console {\n    source_table_name = "fake"\n  }\n}\n')))}d.isMDXComponent=!0}}]);